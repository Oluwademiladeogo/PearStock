name: pearstock-cd

on:
  workflow_run:
    workflows: ["pearstock-ci"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 1. Build and push images once
      - name: Build and Push Docker Images
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          BACKEND_SECRET_KEY: ${{ secrets.BACKEND_SECRET_KEY }}
          BACKEND_ALLOWED_HOSTS: ${{ secrets.BACKEND_ALLOWED_HOSTS }}
          BACKEND_CORS_ALLOWED_ORIGINS: ${{ secrets.BACKEND_CORS_ALLOWED_ORIGINS }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml push

      # 2. Deploy backend on HOST A (EC2 instance #1)
      - name: Deploy Backend
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          BACKEND_SSH_USER: ${{ secrets.BACKEND_SSH_USER }}
          BACKEND_SSH_HOST: ${{ secrets.BACKEND_SSH_HOST }}
          BACKEND_SECRET_KEY: ${{ secrets.BACKEND_SECRET_KEY }}
          BACKEND_ALLOWED_HOSTS: ${{ secrets.BACKEND_ALLOWED_HOSTS }}
          BACKEND_CORS_ALLOWED_ORIGINS: ${{ secrets.BACKEND_CORS_ALLOWED_ORIGINS }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > backend_key
          chmod 600 backend_key
          ssh -i backend_key -o StrictHostKeyChecking=no $BACKEND_SSH_USER@$BACKEND_SSH_HOST <<EOF
            set -e
            sudo docker image prune -f
            sudo docker system prune -f
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/pearserver:latest
            sudo docker stop pearserver || true
            sudo docker rm pearserver || true
            sudo docker run -d --name pearserver \
              -p 8000:8000 \
              -e SECRET_KEY="${BACKEND_SECRET_KEY}" \
              -e ALLOWED_HOSTS="${BACKEND_ALLOWED_HOSTS}" \
              -e CORS_ALLOWED_ORIGINS="${BACKEND_CORS_ALLOWED_ORIGINS}" \
              ${{ secrets.DOCKER_HUB_USERNAME }}/pearserver:latest
            echo "Backend deployment completed successfully!"
          EOF

      # 3. Deploy frontend on HOST B (EC2 instance #2)
      - name: Deploy Frontend
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          FRONTEND_SSH_USER: ${{ secrets.FRONTEND_SSH_USER }}
          FRONTEND_SSH_HOST: ${{ secrets.FRONTEND_SSH_HOST }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > frontend_key
          chmod 600 frontend_key
          ssh -i frontend_key -o StrictHostKeyChecking=no $FRONTEND_SSH_USER@$FRONTEND_SSH_HOST << 'EOF'
            set -e
            sudo docker image prune -f
            sudo docker system prune -f
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/webclient:latest
            sudo docker stop webclient || true
            sudo docker rm webclient || true
            sudo docker run -d --name webclient \
              -p 3000:3000 \
              -e NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL" \
              ${{ secrets.DOCKER_HUB_USERNAME }}/webclient:latest
            echo "Frontend deployment completed successfully!"
          EOF
