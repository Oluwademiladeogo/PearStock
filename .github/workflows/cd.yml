name: pearstock-cd

on:
  workflow_run:
    workflows: ["pearstock-ci"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Images with Docker Compose
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          BACKEND_ALLOWED_HOSTS: ${{secrets.BACKEND_ALLOWED_HOSTS}}
          BACKEND_SECRET_KEY: ${{ secrets.BACKEND_SECRET_KEY }}
          BACKEND_CORS_ALLOWED_ORIGINS: ${{secrets.BACKEND_CORS_ALLOWED_ORIGINS}}
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml push

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          BACKEND_SECRET_KEY: ${{ secrets.BACKEND_SECRET_KEY }}
          BACKEND_ALLOWED_HOSTS: ${{ secrets.BACKEND_ALLOWED_HOSTS }}
          BACKEND_CORS_ALLOWED_ORIGINS: ${{ secrets.BACKEND_CORS_ALLOWED_ORIGINS }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          # Pull both images
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/pearserver:latest
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/webclient:latest

          # Stop and remove existing containers
          sudo docker stop pearserver webclient || true
          sudo docker rm pearserver webclient || true

          # Create Docker network if it doesn't exist
          sudo docker network create pearstock-network || true

          # Run backend container
          sudo docker run -d --name pearserver \
            --network pearstock-network \
            -p 8000:8000 \
            -e SECRET_KEY="$BACKEND_SECRET_KEY" \
            -e ALLOWED_HOSTS="$BACKEND_ALLOWED_HOSTS" \
            -e CORS_ALLOWED_ORIGINS="$BACKEND_CORS_ALLOWED_ORIGINS" \
            ${{ secrets.DOCKER_HUB_USERNAME }}/pearserver:latest

          # Run frontend container
          sudo docker run -d --name webclient \
            --network pearstock-network \
            -p 3000:3000 \
            -e NEXT_PUBLIC_API_URL="$NEXT_PUBLIC_API_URL" \
            ${{ secrets.DOCKER_HUB_USERNAME }}/webclient:latest
          EOF
